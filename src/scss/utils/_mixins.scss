/**
 * Icon Styles
 * Variables for the icons are in the _variables partial
 * This mixin is invoked by the each loop in _icons.scss,
 * it should not be necessary to use it on its own.
 */
@mixin icon-styles($symbol) {
  @extend %icon;
  content: $symbol;
}

/**
 * Breakpoints
 * Accepts:
 * - $breakpoint: {String} Name from varible breakpoint map.
 *
 * Usage:
 * .thing {
 *   @include bp(md) { display: none }
 * }
 */
@mixin bp($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }
  @else {
    @warn "Breakpoint doesn't exist please check breakpoints map.";
  }
}

/**
 * Gradients
 * Accepts:
 * - $start-color: {String} Color variable.
 * - $end-color {String} Color variable.
 * - $orientation { String } vertical, horizonal, null.
 *
 * Usage:
 * .thing {
 *   @include gradient(red, blue, horizontal);
 * }
 */
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: linear-gradient(to bottom, $start-color, $end-color);
  }
  @else if $orientation == 'horizontal' {
    background: linear-gradient(to right, $start-color, $end-color);
  }
  @else if $orientation == 'radial' {
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
  @else {
    @warn "Invalid orientation";
  }
}

/**
 * Is active
 * Helper for native states
 *
 * Usage:
 * .thing {
 *   @include is-active;
 * }
 */
@mixin is-active {
  &:hover,
  &:active,
  &:focus {
    @content;
  }
}

/**
 * Placeholder text
 * Styles input placeholders
 *
 * Usage:
 * .thing {
 *   @include placeholder;
 * }
 */
@mixin placeholder {
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

/**
 * State is...
 * For when state changes are made with js.
 * Accepts:
 * - $el: {String} Class added by js.
 * - $position: {String} Where is lies on the DOM.
 * - $parent: {String} Parent element (optional).
 *
 * Usage:
 * .thing::before {
 *   @include state-is('active', 'self');
 * }
 */
@mixin state-is($el, $position: 'self', $parent: '' ) {
  @if $position == "self" {
    #{$parent} &#{$el} {
      @content;
    }
  }
  @else if $position == "child" {
    #{$parent} & #{$el} {
      @content;
    }
  }
  @else if $position == "parent" {
    #{$parent} #{$el} & {
      @content;
    }
  }
  @else {
    @warn "Invalid position";
  }
}

/**
 * Container - great for creating constrained layouts
 *
 * Usage:
 * .thing {
 *   @include container($gutter: null, $inner: 20px);
 * }
 */
@mixin container($max-width: 1400px, $gutter: 40px, $inner: 0) {
  @if $gutter != null {
    width: calc(100% - (2 * #{$gutter}));
  }
  @else {
    width: 100%;
  }

  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;

  @if $inner != 0 {
    padding-left: $inner;
    padding-right: $inner;
  }
}
